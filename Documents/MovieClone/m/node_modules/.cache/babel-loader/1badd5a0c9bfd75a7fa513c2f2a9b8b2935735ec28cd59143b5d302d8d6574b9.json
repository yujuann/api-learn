{"ast":null,"code":"var _jsxFileName = \"/Users/yuju/Documents/MovieClone/m/src/Row.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"./axios\";\n// import \"./Row.css\";\n// import Youtube from \"react-youtube\";\n// import movieTrailer from \"movie-trailer\";\n\n// const base_url = \"https://image.tmdb.org/t/p/original\";\n\n// // fetchUrl필요하다\n// function Row({ title, fetchUrl, isLargeRow }) {\n//   const [movies, setMovies] = useState([]);\n\n//   const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       const request = await axios.get(fetchUrl);\n//       setMovies(request.data.results);\n//       return request;\n//     }\n//     fetchData();\n//   }, [fetchUrl]);\n\n//   const opts = {\n//     with: \"100%\",\n//     height: \"390\",\n//     playerVars: {\n//       autoplay: 0,\n//     },\n//   };\n\n//   const handleClick = (movie) => {\n//     if (trailerUrl) {\n//       setTrailerUrl(\"\");\n//     } else {\n//       movieTrailer(movie?.name || \"\")\n//         .then((url) => {\n//           const urlParams = new URLSearchParams(new URL(url).search);\n//           setTrailerUrl(urlParams.get(\"v\"));\n//         })\n//         .catch((error) => console.log(error));\n//     }\n//   };\n//   return (\n//     <div className=\"row\">\n//       <h2>{title}</h2>\n//       <div className=\"row__posters\">\n//         {/* poster */}\n//         {/*  several row__container-> poster(S) */}\n//         {movies.map((movie) => (\n//           <img\n//             onClick={() => handleClick(movie)}\n//             key={movie.id}\n//             className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n//             src={`${base_url}${\n//               isLargeRow ? movie.poster_path : movie.backdrop_path\n//             }`}\n//             alt={movie.name}\n//           />\n//         ))}\n//       </div>\n//       {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n//     </div>\n//   );\n// }\n\n// export default Row;\n\nimport React, { useState, useEffect } from \"react\";\nimport movieTrailer from \"movie-trailer\";\nimport Youtube from \"react-youtube\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = \"https://image.tmdb.org/t/p/original\";\nfunction Row(_ref) {\n  _s();\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  //react hooks useEffect and useState\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  //snippet of code which runs based on specific condition\n  useEffect(() => {\n    //if [] then run only once when the row loads\n    //if [variable] then run when row loads and run when variable value changes\n    async function fetchData() {\n      //it take some time in fetching from tmdb\n      //axios gives instance and remaining from prop fetchUrl passed from Row\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n    //eternal variable in useEffect ust be put in like [fetchUrl] as it\n    //is dependency in this way useEffect refires the code when fetchUrl\n    //changes\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"99%\",\n    playerVars: {\n      autoplay: 0\n    }\n  };\n  const handleClick = movie => {\n    if (trailerUrl) {\n      //if already open then close it\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.title) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n      }).catch(error => console.log(error));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row_poster ${isLargeRow && \"row_posterLarge\"} `,\n        src: `${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n\n//there can be only one default export in one file\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","movieTrailer","Youtube","axios","baseUrl","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","name","id"],"sources":["/Users/yuju/Documents/MovieClone/m/src/Row.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import axios from \"./axios\";\n// import \"./Row.css\";\n// import Youtube from \"react-youtube\";\n// import movieTrailer from \"movie-trailer\";\n\n// const base_url = \"https://image.tmdb.org/t/p/original\";\n\n// // fetchUrl필요하다\n// function Row({ title, fetchUrl, isLargeRow }) {\n//   const [movies, setMovies] = useState([]);\n\n//   const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       const request = await axios.get(fetchUrl);\n//       setMovies(request.data.results);\n//       return request;\n//     }\n//     fetchData();\n//   }, [fetchUrl]);\n\n//   const opts = {\n//     with: \"100%\",\n//     height: \"390\",\n//     playerVars: {\n//       autoplay: 0,\n//     },\n//   };\n\n//   const handleClick = (movie) => {\n//     if (trailerUrl) {\n//       setTrailerUrl(\"\");\n//     } else {\n//       movieTrailer(movie?.name || \"\")\n//         .then((url) => {\n//           const urlParams = new URLSearchParams(new URL(url).search);\n//           setTrailerUrl(urlParams.get(\"v\"));\n//         })\n//         .catch((error) => console.log(error));\n//     }\n//   };\n//   return (\n//     <div className=\"row\">\n//       <h2>{title}</h2>\n//       <div className=\"row__posters\">\n//         {/* poster */}\n//         {/*  several row__container-> poster(S) */}\n//         {movies.map((movie) => (\n//           <img\n//             onClick={() => handleClick(movie)}\n//             key={movie.id}\n//             className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n//             src={`${base_url}${\n//               isLargeRow ? movie.poster_path : movie.backdrop_path\n//             }`}\n//             alt={movie.name}\n//           />\n//         ))}\n//       </div>\n//       {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n//     </div>\n//   );\n// }\n\n// export default Row;\n\nimport React, { useState, useEffect } from \"react\";\nimport movieTrailer from \"movie-trailer\";\nimport Youtube from \"react-youtube\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\n\nconst baseUrl = \"https://image.tmdb.org/t/p/original\";\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  //react hooks useEffect and useState\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  //snippet of code which runs based on specific condition\n  useEffect(() => {\n    //if [] then run only once when the row loads\n    //if [variable] then run when row loads and run when variable value changes\n    async function fetchData() {\n      //it take some time in fetching from tmdb\n      //axios gives instance and remaining from prop fetchUrl passed from Row\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n    //eternal variable in useEffect ust be put in like [fetchUrl] as it\n    //is dependency in this way useEffect refires the code when fetchUrl\n    //changes\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"99%\",\n    playerVars: {\n      autoplay: 0,\n    },\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      //if already open then close it\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.title || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img\n            onClick={() => handleClick(movie)}\n            key={movie.id}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"} `}\n            src={`${baseUrl}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\n//there can be only one default export in one file\nexport default Row;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}